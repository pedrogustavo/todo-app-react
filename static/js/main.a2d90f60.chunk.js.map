{"version":3,"sources":["redux/todo.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["updateStorage","key","value","localStorage","setItem","JSON","stringify","todoSlice","createSlice","name","initialState","tasks","getItem","parse","id","completed","reducers","addTask","state","action","length","payload","toggleCompleted","map","item","removeTask","filter","index","actions","State","loadable","App","className","path","component","configureStore","reducer","todo","todoReducer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","store","StrictMode","document","getElementById"],"mappings":"iPAEMA,EAAgB,SAACC,EAAKC,GACxBC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,KAGhCK,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZC,MAAOR,aAAaS,QAAQ,SACtBP,KAAKQ,MAAMV,aAAaS,QAAQ,UAChC,CACE,CACIE,GAAI,EACJZ,MAAO,8BACPa,WAAW,KAIzBC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACbD,EAAMP,MAAN,sBACOO,EAAMP,OADb,CAEI,CACIG,GAAII,EAAMP,MAAMS,OAAS,EACzBlB,MAAOiB,EAAOE,QACdN,WAAW,KAGnBf,EAAc,QAASkB,EAAMP,QAEjCW,gBAAiB,SAACJ,EAAOC,GACrBD,EAAMP,MAAQO,EAAMP,MAAMY,KAAI,SAAAC,GAE1B,OADIA,EAAKV,KAAOK,EAAOE,UAASG,EAAKT,WAAaS,EAAKT,WAChDS,KAEXxB,EAAc,QAASkB,EAAMP,QAEjCc,WAAY,SAACP,EAAOC,GAChBD,EAAMP,MAAQO,EAAMP,MACfe,QAAO,SAAAF,GAAI,OAAIA,EAAKV,KAAOK,EAAOE,WAClCE,KAAI,SAACC,EAAMG,GAER,OADAH,EAAKV,GAAKa,EACHH,KAEfxB,EAAc,QAASkB,EAAMP,WAK9B,EAAiDJ,EAAUqB,QAAnDX,EAAR,EAAQA,QAASK,EAAjB,EAAiBA,gBAAiBG,EAAlC,EAAkCA,WAE1BlB,MAAf,S,oJC9CMsB,EAAQC,aAAS,kBAAM,gCAiBdC,MAff,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,IAAD,UACI,cAAC,IAAD,UAII,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWL,W,wBCZhCM,cAAe,CAC1BC,QAAS,CACLC,KAAMC,OCMCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCGdQ,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACM,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,QAGVC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.a2d90f60.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst updateStorage = (key, value) => {\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n}\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: {\r\n    tasks: localStorage.getItem('tasks') \r\n        ? JSON.parse(localStorage.getItem('tasks'))\r\n        : [\r\n            {\r\n                id: 1,\r\n                value: 'npx create-react-app my-app',\r\n                completed: true\r\n            }\r\n        ]    \r\n  },\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n        state.tasks = [\r\n            ...state.tasks, \r\n            {\r\n                id: state.tasks.length + 1,\r\n                value: action.payload,\r\n                completed: false\r\n            }\r\n        ]\r\n        updateStorage('tasks', state.tasks)\r\n    },\r\n    toggleCompleted: (state, action) => {\r\n        state.tasks = state.tasks.map(item => {\r\n            if (item.id === action.payload) item.completed = !item.completed\r\n            return item\r\n        })\r\n        updateStorage('tasks', state.tasks)\r\n    },\r\n    removeTask: (state, action) => {\r\n        state.tasks = state.tasks\r\n            .filter(item => item.id !== action.payload)\r\n            .map((item, index) => {\r\n                item.id = index\r\n                return item\r\n            })\r\n        updateStorage('tasks', state.tasks)\r\n    }\r\n  }\r\n})\r\n\r\nexport const { addTask, toggleCompleted, removeTask } = todoSlice.actions\r\n\r\nexport default todoSlice.reducer","import React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport loadable from '@loadable/component'\n\n// const Home = loadable(() => import('./views/Home'))\n// const Binding = loadable(() => import('./components/ComponentClass'))\nconst State = loadable(() => import('./views/State'))\n\nfunction App () {\n    return (\n        <div className='App'>\n            <Router>\n                <Switch>\n                    {/* <Route path='/state' component={State} />\n                    <Route path='/binding' component={Binding} />\n                    <Route path='/' component={Home} /> */}\n                    <Route path='/' component={State} />\n                </Switch>\n            </Router>\n       </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport todoReducer from './todo'\r\n\r\nexport default configureStore({ \r\n    reducer: {\r\n        todo: todoReducer\r\n    }\r\n})\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport reportWebVitals from './reportWebVitals'\n\nimport './assets/reset.css'\nimport './assets/style.css'\n\nReactDOM.render(\n  <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}